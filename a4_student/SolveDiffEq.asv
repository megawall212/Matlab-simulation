function [x, name, ufid] = SolveDiffEq(A, x0, max_k)
    % Purpose: (COMMENT)
    % Input Argument [A]: (COMMENT)
    % Input Argument [x0]: (COMMENT)
    % Output Argument [x]: (COMMENT)
  
    % Purpose: Computes the steady-state distribution of a Markov chain by solving x_{k+1} = A*x_k.
    % Input Argument [A]: Stochastic matrix representing transition probabilities (its rows sum to 1).
    % Input Argument [x0]: Initial probability vector ( should sum to 1
    % too)
    % Output Argument [x]: Limiting probability vector as k approaches infinity (steady-state distribution)

    % --- Name & UFID --- %
    name = "Zeyu Li";
    ufid = 55153019;

    n = length(x0);

    tol = 10e-8; % Absolute Tolerance = 0.000 000 01
    if nargin < 3
        max_k = 10e4; % Default Max # of Iterations = 10,000
    end

    k = 0;
    x = x0;
    x_last = zeros(n, 1);

    % While the difference between the distance between the last and the
    % current vector is greater than the set tolerance and we haven't
    % reached the max # of iterations, ...
    while norm(x - x_last) > tol && k < max_k
        % Perform the difference equation (enter code below)
        x_last = x;          % Store current x before updating
        x = A * x;           % Compute next state in Markov chain
        k = k + 1;           % Increment iteration counter
        % (ENTER CODE HERE)
        % break % (REMOVE THIS LINE)
    end
end




   
